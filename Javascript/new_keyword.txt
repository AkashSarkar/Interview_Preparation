’new’ keyword in javascript creates a ‘this’ object inside of a function. 
Which means when you use new keyword to instantiate an object it create ‘this’ object 
inside that object and returns it implicitly.

function Animal (name, energy) {
  let animal = Object.create(Animal.prototype)
  animal.name = name
  animal.energy = energy

  return animal
}

Here’s the cool thing about new - when you invoke a function using the new keyword, 
creating the object and returning it,those two lines are done for you 
implicitly (“under the hood”) and the object that is created is called this.

Using comments to show what happens under the hood and assuming the Animal constructor 
is called with the new keyword, it can be re-written as this.

function Animal (name, energy) {
  // const this = Object.create(Animal.prototype)

  this.name = name
  this.energy = energy

  // return this
}

const leo = new Animal('Leo', 7)
const snoop = new Animal('Snoop', 10)

and without the “under the hood” comments

function Animal (name, energy) {
  this.name = name
  this.energy = energy
}

const leo = new Animal('Leo', 7)
console.log(leo)
